# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17notZuOZ46gVGJdWUalAwyf7mTwo2OKo
"""

import torch
import numpy as np

class TripleDataLoader(object):
  """
  reading data on the fly is too slow in Colab
  0. pass the dataset object in directly (to save time)
    the data is already fully pre-processed. 
  1. randomly pick the correctly-paired data from files with specified batch size
    1.1 the correct paired data are images and text
    1.2 the images are transformed to batch_sizex3x224x224 dim ready to plug into resnet
    1.3 the text are transformed to batch_size dim vectors of BERT specific tokens 
        (with header, end, PAD) ready to plug into BERT
    1.4 need to also return the attention_mask for the text
  2. randomly pick other images as decoys (unpaired from the text)
    2.1 transform images similar to step 1
  return tuple of 4 items texts, attention_mask, paired-images, unpaired=images
  """
  def __init__(self,text_tensor_input,
               image_tensor_input, batch_size = 5,shuffle=True):
      
      self.text = text_tensor_input
      self.image = image_tensor_input
      self.length = self.text.shape[0]
      self.batch_size = batch_size
      self.sampler = [i for i in range(self.length)]
      self.unpaired_sampler = [i for i in range(self.length)]
      self.shuffle = shuffle
      if shuffle:
          np.random.shuffle(self.sampler)
      np.random.shuffle(self.unpaired_sampler)
      
  def __iter__(self):
      
      self.n = 0
      return self
  
  def __next__(self):
      if self.n == 0 and self.shuffle:
        np.random.shuffle(self.sampler)
        np.random.shuffle(self.unpaired_sampler)
      if self.n < self.length:
        list_pick = self.sampler[self.n:self.n+self.batch_size]
        list_unpaired = self.unpaired_sampler[self.n:self.n+self.batch_size]
        #rand_sentence = np.random.randint(5)


        text_tensor = self.text[list_pick]
        image_tensor = self.image[list_pick]
        unpaired_tensor = self.text[list_unpaired]
        self.n += self.batch_size
        return text_tensor, image_tensor, unpaired_tensor
      else:
        raise StopIteration

