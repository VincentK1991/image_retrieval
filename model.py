# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_nfb7Gt_TpPhrtotdyGd6ZZjYuQG15aI
"""

print('test')

import torch
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as plt
import torchvision
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


class TextEncoder(nn.Module):

  def __init__(self,input_dim,hidden_dim,vocab_size,embedding_dim,output_dim=100,dropout=0.5):
    super(TextEncoder, self).__init__()
    self.embedding_dim = embedding_dim
    self.vocab_size = vocab_size
    self.input_dim = input_dim
    self.embedding = nn.Embedding(self.vocab_size, self.embedding_dim)
    self.hidden_dim = hidden_dim
    self.dropout = nn.Dropout(p=dropout)
    self.fc1 = nn.Linear(self.embedding_dim,self.hidden_dim)
    self.relu = nn.ReLU()
    self.tanh = nn.Tanh()
    self.fc2 = nn.Linear(self.input_dim*self.hidden_dim,output_dim)


  def forward(self,text_input):
    embeds = self.embedding(text_input)
    hidden = self.relu(self.fc1(embeds))
    hidden = hidden.reshape(-1,self.input_dim*self.hidden_dim)
    hidden = self.dropout(hidden)
    output = self.fc2(hidden)
    output = self.tanh(output)
    return output


class ImageEncoder(nn.Module):

  def __init__(self, autoencode_dim = 100):
    super(ImageEncoder, self).__init__()
    self.autoencode_dim = autoencode_dim

    self.resnet = torchvision.models.resnet50(pretrained=True)
    self.resnet.fc = nn.Linear(2048,self.autoencode_dim)
    self.decoder_module = nn.Linear(self.autoencode_dim,2048)
    self.tanh = nn.Tanh()

    for p in self.resnet.parameters():
      p.requires_grad = False
    for c in list(self.resnet.children())[6:]:
      for p in c.parameters():
        p.requires_grad = True
    
    for p in self.decoder_module.parameters():
      p.requires_grad = True

  def autoencode(self,images_input):
    encoded = self.resnet(images_input)
    encoded = self.tanh(encoded)
    output = self.decoder_module(encoded)
    return output

  def forward(self,image_input):
    encoded = self.resnet(image_input)
    encoded = self.tanh(encoded)
    return encoded

class TripleEncoder(nn.Module):
  
  def __init__(self,image_encoder,text_encoder):
    super(TripleEncoder, self).__init__()
    self.image_encoder = image_encoder
    self.text_encoder = text_encoder

  def forward(self, text_input, image_input, decoy_input):
    text_output = self.text_encoder(text_input)
    image_output = self.image_encoder(image_input)
    decoy_output = self.text_encoder(decoy_input)
    return text_output, image_output, decoy_output
  
  def get_embedding(self,input_item,is_image=True):
    
    if is_image:
      return self.image_encoder(input_item)
    else :
      return self.text_encoder(input_item)
